type tag {
  id: Int
  name: String
  color: String
}

type token {
  token: String
  life_time: String
}

type rule {
  path: String!
  permission: Int!
  description: String
}

type role {
  name: String
  rules: [rule]
  description: String
}

type contactsType {
  id: Int
  type: String
  regex: String
  prefix: String
}

type contact {
  uuid: String
  type: String
  typeParams: contactsType
  value: String
}

type customer {
  uuid: String
  name: String
  discount_card: Int
  tags: [tag]
  contacts: [contact]
}

type user {
  uuid: String
  login: String
  tags: [tag]
  contacts: [contact]
  roles: [role]
}

type Query {
  test: [String]

  allTags: [tag]
  countOfTags: Int

  allContactsTypes: [contactsType]
  contactsTypeById(id: Int!): contactsType

  contactById(uuid: String!): contact

  allCustomers: [customer]
  countOfCustomers: Int
  customerById(uuid: String!): customer

  allUsers: [user]
  countOfUsers: Int
  userById(uuid: String!): user
  authorization(login: String!, password: String!): token
  update_token(token: String!): token

  allRoles: [role]
  getRole(id: Int!): role
  getRoleByName(name: String!): role

  allRules: [rule]
  getRule(id: Int): rule
}

input contactInput {
  uuid: String
  typeId: Int!
  value: String!
}

input tagInput {
  name: String!
  color: String
}

input roleInput {
  name: String!
}

type Mutation {

  createTag(name: String!, color: String): tag
  updateTag(id: Int!, name: String, color: String): tag
  deleteTag(id: Int!): tag

  createContactsType(type: String!, regex: String, prefix: String): contactsType
  updateContactsType(id: Int!, type: String, regex: String, prefix: String): contactsType
  deleteContactsType(id: Int!): contactsType

  createContact(typeId: Int!, value: String!): contact
  createContactForPerson(personUuid: String!, typeId: Int!, value: String!): contact
  updateContact(uuid: String!, typeId: Int, value: String): contact
  deleteContact(uuid: String!): contact

  addNewTagToCustomer(uuid: String!, tagName: String!, tagColor: String): customer
  addTagByIdToCustomer(uuid: String!, tagId: Int!): customer
  addContactToCustomer(personUuid: String!, contactUuid: String!): customer
  addContactToUser(personUuid: String!, contactUuid: String!): user
  deleteTagOfCustomer(uuid: String!, tagId: Int, tagName: String): customer

  createCustomer(name: String, discount_card: Int ,tags: [tagInput], contacts: [contactInput!]!): customer
  updateCustomer(uuid: String!, name: String, discount_card: Int ,tags: [tagInput], contacts: [contactInput]): customer
  deleteCustomer(uuid: String!): customer

  createUser(uuid: String, name: String, login: String!, password: String!, tags: [tagInput], contacts: [contactInput]): user
  updateUser(uuid: String!, name: String, login: String, tags: [tagInput], contacts: [contactInput]): user
  updateUserRoles(uuid: String!, roles: [roleInput]): user
  deleteUser(uuid: String!): user

  createRole(name: String!, description: String, rulesId:[Int]): role
  updateRole(id: Int, name: String, description: String, rulesId:[Int]): role
  deleteRole(id: Int!): role

  createRule(rulePath: String!, permission: Int!): rule
  updateRule(id: Int!, rulePath: String, permission: Int): rule
  deleteRule(id: Int!): rule

#  create():
#  update():
#  delete():
#  start(roomName: String): Room
#  chat(roomName: String, body: String): Message
}
